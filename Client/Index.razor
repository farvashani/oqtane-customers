@using Tres.Customers.Services
@using Tres.Customers.Models

@namespace Tres.Customers
@inherits ModuleBase
@inject ICustomerService CustomerService
@inject NavigationManager NavigationManager

@if (_Customers == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <ActionLink Action="Add" Security="SecurityAccessLevel.Edit" IconName="plus" Text="Add Customer/Client" />
    <br />
    <br />
    @if (@_Customers.Count != 0)
    {
        <table class="table table-striped table-bordered table-hover">
            <thead>
                <tr>
                    <th>First Name</th>
                    <th>Last Name</th>
                    <th>Address1</th>
                    <th>Address2</th>
                    <th>City</th>
                    <th>State</th>
                    <th>Zip Code</th>
                    <th>Phone</th>
                    <th>Email</th>
                    @if(PageState.EditMode == true)
                    {
                        <th>Actions</th>
                    }
                    
                </tr>
            </thead>
            <tbody>

                @foreach (var i in @_Customers)
                {
                <tr>

                    <td>@i.FirstName</td>
                    <td>@i.LastName</td>
                    <td>@i.Address1</td>
                    <td>@i.Address2</td>
                    <td>@i.City</td>
                    <td>@i.UsState</td>
                    <td>@i.ZipCode</td>
                    <td>@i.Phone</td>
                    <td>@i.Email</td>
                    @if (PageState.EditMode == true)
                    {
                        <td>
                            <ActionLink IconName="pencil" Action="Edit" Parameters="@($"id=" + @i.CustomerId.ToString())" />
                            <ActionDialog IconName="trash" Header="Delete Customer" Message="@("Are You Sure You Wish To Delete Customer " + @i.FirstName + " ?")" 
                                          Action="Delete" Security="SecurityAccessLevel.Edit" Class="btn btn-danger" OnClick="@(async () => await Delete(@i))" />
                        </td>
                    }

                </tr>

                }

            </tbody>
        </table>
       
    }
    else
    {
        <p>No Customers To Display</p>
    }
}


@code {
    List<Customer> _Customers;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _Customers = await CustomerService.GetCustomersAsync(ModuleState.ModuleId);
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading Customer {Error}", ex.Message);
            AddModuleMessage("Error Loading Customer", MessageType.Error);
        }
    }

    private async Task Delete(Customer Customer)
    {
        try
        {
            await CustomerService.DeleteCustomerAsync(Customer.CustomerId);
            await logger.LogInformation("Customer Deleted {Customer}", Customer);
            _Customers = await CustomerService.GetCustomersAsync(ModuleState.ModuleId);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Deleting Customer {Customer} {Error}", Customer, ex.Message);
            AddModuleMessage("Error Deleting Customer", MessageType.Error);
        }
    }
}